{
	"folders":
	[
		{
			"name": "Game",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"ARENA_DEBUG_PADDING_SIZE",
			"ARENA_DEBUG_PADDING_VALUE",
			"ArenaFlag_AddPaddingForDebug",
			"BOX_MESH_NUM_INDICES_PER_FACES",
			"BOX_MESH_NUM_VERTICES_PER_FACES",
			"BOX_NUM_FACES",
			"BUILD_BULLET",
			"BUILD_IMGUI_OBJ",
			"BUILD_IMGUI_OBJ_IF_NEEDED",
			"BUILD_WITH_BULLET",
			"BUILD_WITH_CLAY",
			"BUILD_WITH_IMGUI",
			"BUILD_WITH_SOKOL_APP",
			"BUILD_WITH_SOKOL_GFX",
			"CLAY_DEF_PADDING",
			"CLAY_TOPBAR_HEIGHT",
			"ContBtn_A",
			"ContBtn_B",
			"ContBtn_Back",
			"ContBtn_Console",
			"ContBtn_Count",
			"ContBtn_Down",
			"ContBtn_Left",
			"ContBtn_LeftBumper",
			"ContBtn_LeftStick",
			"ContBtn_LeftTrigger",
			"ContBtn_Microphone",
			"ContBtn_None",
			"ContBtn_Pad",
			"ContBtn_Right",
			"ContBtn_RightBumper",
			"ContBtn_RightStick",
			"ContBtn_RightTrigger",
			"ContBtn_Start",
			"ContBtn_Up",
			"ContBtn_X",
			"ContBtn_Y",
			"ContBtn_lsDown",
			"ContBtn_lsLeft",
			"ContBtn_lsRight",
			"ContBtn_lsUp",
			"ContBtn_rsDown",
			"ContBtn_rsLeft",
			"ContBtn_rsRight",
			"ContBtn_rsUp",
			"END_EXTERN_C",
			"EXTERN_C",
			"FP3D_SCENE_ENABLED",
			"FontCharRange_ASCII",
			"FontCharRange_Cyrillic",
			"FontCharRange_Hiragana",
			"FontCharRange_Katakana",
			"FontCharRange_LatinExt",
			"FontStyleFlag_All",
			"FontStyleFlag_Bold",
			"FontStyleFlag_Inverted",
			"FontStyleFlag_Italic",
			"FontStyleFlag_None",
			"FontStyleFlag_Outline",
			"FontStyleFlag_Strikethrough",
			"FontStyleFlag_Underline",
			"GFX_SYSTEM_CIRCLE_NUM_SIDES",
			"GFX_SYSTEM_RING_NUM_SIDES",
			"GFX_SYSTEM_RING_NUM_THICKNESSES",
			"GfxPipelineBlendMode_Count",
			"GfxPipelineBlendMode_None",
			"GfxPipelineBlendMode_Normal",
			"GfxPipelineBlendMode_Opaque",
			"GfxPipelineBlendMode_PremultipliedNormal",
			"IMGUI_INI_FILE_NAME",
			"IMGUI_LOG_FILE_NAME",
			"KERNING_GLYPH_INDEX_FOUND_FLAG",
			"KEYBOARD_MAX_CHAR_INPUTS_PER_FRAME",
			"Key_0",
			"Key_1",
			"Key_2",
			"Key_3",
			"Key_4",
			"Key_5",
			"Key_6",
			"Key_7",
			"Key_8",
			"Key_9",
			"Key_A",
			"Key_Alt",
			"Key_B",
			"Key_Backspace",
			"Key_C",
			"Key_CapsLock",
			"Key_CloseBracket",
			"Key_Colon",
			"Key_Comma",
			"Key_Command",
			"Key_Control",
			"Key_Count",
			"Key_D",
			"Key_Delete",
			"Key_Digit0",
			"Key_Digit1",
			"Key_Digit2",
			"Key_Digit3",
			"Key_Digit4",
			"Key_Digit5",
			"Key_Digit6",
			"Key_Digit7",
			"Key_Digit8",
			"Key_Digit9",
			"Key_Down",
			"Key_E",
			"Key_End",
			"Key_Enter",
			"Key_Escape",
			"Key_F",
			"Key_F1",
			"Key_F10",
			"Key_F11",
			"Key_F12",
			"Key_F2",
			"Key_F3",
			"Key_F4",
			"Key_F5",
			"Key_F6",
			"Key_F7",
			"Key_F8",
			"Key_F9",
			"Key_ForwardSlash",
			"Key_G",
			"Key_H",
			"Key_Home",
			"Key_I",
			"Key_Insert",
			"Key_J",
			"Key_K",
			"Key_L",
			"Key_Left",
			"Key_LeftAlt",
			"Key_LeftCommand",
			"Key_LeftControl",
			"Key_LeftOption",
			"Key_LeftShift",
			"Key_LeftWindows",
			"Key_M",
			"Key_Minus",
			"Key_N",
			"Key_None",
			"Key_NumLock",
			"Key_Numpad0",
			"Key_Numpad1",
			"Key_Numpad2",
			"Key_Numpad3",
			"Key_Numpad4",
			"Key_Numpad5",
			"Key_Numpad6",
			"Key_Numpad7",
			"Key_Numpad8",
			"Key_Numpad9",
			"Key_NumpadAdd",
			"Key_NumpadDivide",
			"Key_NumpadEnter",
			"Key_NumpadMultiply",
			"Key_NumpadPeriod",
			"Key_NumpadSubtract",
			"Key_O",
			"Key_OpenBracket",
			"Key_Option",
			"Key_P",
			"Key_PageDown",
			"Key_PageUp",
			"Key_Pause",
			"Key_Period",
			"Key_Pipe",
			"Key_Plus",
			"Key_PrimaryEnter",
			"Key_PrintScreen",
			"Key_Q",
			"Key_Quote",
			"Key_R",
			"Key_Right",
			"Key_RightAlt",
			"Key_RightCommand",
			"Key_RightControl",
			"Key_RightOption",
			"Key_RightShift",
			"Key_RightWindows",
			"Key_S",
			"Key_ScrollLock",
			"Key_Shift",
			"Key_Space",
			"Key_T",
			"Key_Tab",
			"Key_Tilde",
			"Key_U",
			"Key_Up",
			"Key_V",
			"Key_W",
			"Key_Windows",
			"Key_X",
			"Key_Y",
			"Key_Z",
			"LANGUAGE_IS_C",
			"LANGUAGE_IS_CPP",
			"LOAD_FROM_RESOURCES_FOLDER",
			"MAX_ALT_KEY_MAPPINGS",
			"MAYBE_END_EXTERN_C",
			"MAYBE_EXTERN_C",
			"MAYBE_START_EXTERN_C",
			"MOUSE_LERP_WINDOW_PADDING",
			"ModifierKey_All",
			"ModifierKey_Alt",
			"ModifierKey_Control",
			"ModifierKey_None",
			"ModifierKey_Shift",
			"MouseBtn_Count",
			"MouseBtn_Extra1",
			"MouseBtn_Extra2",
			"MouseBtn_Left",
			"MouseBtn_Middle",
			"MouseBtn_None",
			"MouseBtn_Right",
			"MouseBtn_Scroll",
			"MouseBtn_ScrollDown",
			"MouseBtn_ScrollUp",
			"Result_Deprecated",
			"Result_EmptyFile",
			"Result_FileNotFound",
			"Result_InvalidOptions",
			"Result_InvalidSyntax",
			"Result_MissingFileHeader",
			"Result_NoDeviceContext",
			"Result_NoForegroundWindow",
			"Result_NoMoreBytes",
			"Result_NotFound",
			"Result_Partial",
			"START_EXTERN_C",
			"TEST_FONT_NAME",
		],
		"custom_functions":
		[
			"#define AllocAndNew(classPntrVarName, arenaPntr, classType)",
			"#define AllocAndNewWithArgs(classPntrVarName, arenaPntr, classType, ...)",
			"#define BeginFrame(swapchain, screenSize, clearColor, clearDepth)",
			"#define BindFont(fontPntr)",
			"#define BindFontAtSize(fontPntr, fontSize)",
			"#define BindFontEx(fontPntr, fontSize, fontStyleFlags)",
			"#define BindShader(shaderPntr)",
			"#define BindTexture(texturePntr)",
			"#define BindTextureAtIndex(texturePntr, textureIndex)",
			"#define BindVertBuffer(bufferPntr)",
			"#define ClearDepthBuffer(clearDepth)",
			"#define DeclareAllocAndNew(classPntrVarName, arenaPntr, classType)",
			"#define DeclareAllocAndNewWithArgs(classPntrVarName, arenaPntr, classType, ...)",
			"#define DisableClipRec()",
			"#define DrawCircle(circle, color)",
			"#define DrawCirclePiece(circle, angleMin, angleMax, color)",
			"#define DrawObb2(boundingBox, color)",
			"#define DrawRectangle(rectangle, color)",
			"#define DrawRectangleOutline(rectangle, borderThickness, color)",
			"#define DrawRectangleOutlineEx(rectangle, borderThickness, color, outside)",
			"#define DrawRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color)",
			"#define DrawRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside)",
			"#define DrawRing(circle, thickness, color)",
			"#define DrawRingPiece(circle, thickness, angleMin, angleMax, color)",
			"#define DrawRoundedRectangle(rectangle, radius, color)",
			"#define DrawRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color)",
			"#define DrawRoundedRectangleOutline(rectangle, thickness, radius, color)",
			"#define DrawRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside)",
			"#define DrawText(text, position, color)",
			"#define DrawTextAtSize(fontSize, text, position, color)",
			"#define DrawTextBold(text, position, color)",
			"#define DrawTextItalic(text, position, color)",
			"#define DrawTexturedCircle(circle, color, texture)",
			"#define DrawTexturedCircleEx(circle, color, texture, sourceRec)",
			"#define DrawTexturedCirclePiece(circle, angleMin, angleMax, color, texture)",
			"#define DrawTexturedCirclePieceEx(circle, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedObb2(boundingBox, color, texture)",
			"#define DrawTexturedObb2Ex(boundingBox, color, texture, sourceRec)",
			"#define DrawTexturedRectangle(rectangle, color, texture)",
			"#define DrawTexturedRectangleEx(rectangle, color, texture, sourceRec)",
			"#define DrawTexturedRectangleOutline(rectangle, borderThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineEx(rectangle, borderThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRing(circle, thickness, color, texture)",
			"#define DrawTexturedRingEx(circle, thickness, color, texture, sourceRec)",
			"#define DrawTexturedRingPiece(circle, thickness, angleMin, angleMax, color, texture)",
			"#define DrawTexturedRingPieceEx(circle, thickness, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangle(rectangle, radius, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutline(rectangle, thickness, radius, color, outside, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside, texture, sourceRec)",
			"#define DrawVertices()",
			"#define DrawVerticesEx(startVertexOrIndex, numVerticesOrIndices)",
			"#define EndFrame()",
			"#define FlushBindings()",
			"#define FlushPipelineGen()",
			"#define NewClassInArena(classType, classPntrVarName, arenaPntr, ...)",
			"#define SetClipRec(clipRec)",
			"#define SetColorWriteEnabled(colorWriteEnabled)",
			"#define SetCullingEnabled(cullingEnabled)",
			"#define SetDepth(depth)",
			"#define SetDepthTestEnabled(depthTestEnabled)",
			"#define SetDepthWriteEnabled(depthWriteEnabled)",
			"#define SetProjectionMat(matrix)",
			"#define SetSourceRec(rectangle)",
			"#define SetSourceRecRaw(rectangle)",
			"#define SetTintColor(color)",
			"#define SetTintColorRaw(colorVec)",
			"#define SetVertexOffset(vertexOffset)",
			"#define SetViewMat(matrix)",
			"#define SetWorldMat(matrix)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"AppApi APP_GET_API_DEF()",
			"Circle NewCircle(r32 x, r32 y, r32 radius)",
			"Circle NewCircleV(v2 center, r32 radius)",
			"Clay_BoundingBox Clay_FindElementBoundsById(Clay_ElementId elementId)",
			"Clay_BoundingBox ToClayBoundingBox(rec rectangle)",
			"Clay_Color ToClayColor(Color32 color)",
			"Clay_Dimensions CLAY_UI_MEASURE_TEXT_DEF(Clay_StringSlice text, Clay_TextElementConfig* config, void* userData)",
			"Clay_Dimensions ClayUIRendererMeasureText(Clay_StringSlice text, Clay_TextElementConfig* config, void* userData)",
			"Clay_Dimensions Clay_FindElementDimensionsById(Clay_ElementId elementId)",
			"Clay_Dimensions ToClayDimensions(v2 vector)",
			"Clay_ElementDeclaration ClayTopbar(const char* id, r32 height, Color32 color)",
			"Clay_ElementId ToClayId(Str8 idStr)",
			"Clay_ElementId ToClayIdEx(Str8 idStr, uxx index)",
			"Clay_ElementId ToClayIdNt(const char* idNullTermString)",
			"Clay_LayoutElement* FindClayLayoutElementById(Clay_ElementId elementId)",
			"Clay_RenderCommandArray EndClayUIRender(ClayUI* clay)",
			"Clay_String ToClayString(Str8 str)",
			"Clay_Vector2 ToClayVector2(v2 vector)",
			"Color32 ColorLerpSimple(Color32 start, Color32 end, r32 amount)",
			"Color32 ToColorFromClay(Clay_Color clayColor)",
			"FilePath OsGetFullPath(Arena* arena, FilePath relativePath)",
			"FontAtlas* GetDefaultFontAtlas(Font* font)",
			"FontGlyph* GetFontGlyphForCodepoint(Font* font, u32 codepoint, r32 fontSize, u8 styleFlags, FontAtlas** atlasOut)",
			"GeneratedMesh GenerateVertsForBox(Arena* arena, Box boundingBox, Color32 color)",
			"GeneratedMesh GenerateVertsForBoxEx(Arena* arena, Box boundingBox, Color32* colors)",
			"GeneratedMesh GenerateVertsForSphere(Arena* arena, Sphere sphere, uxx numRings, uxx numSegments, Color32 color)",
			"GfxPipeline* FindGfxSystemPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"GfxPipeline* FindOrAddGfxSystemPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"GfxPipeline* GfxSystem_FindOrAddPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"GfxPipeline* GfxSystem_FindPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"ImGuiKey GetImGuiKey(Key key)",
			"ImVec2 ToImVec2(v2 vector)",
			"ImVec4 ToImVec4(v4 vector)",
			"ImVec4 ToImVec4FromColor(Color32 color)",
			"ImageData NewImageData(v2i size, u32* pixels)",
			"ImguiUI* InitImguiUI(Arena* arena, const void* nativeWindowPntr)",
			"Key GetKeyFromSokolKeycodeEx(sapp_keycode keycode, u8 alternateIndex)",
			"Key GetNonAltKeyForKey(Key key, u8 primaryIndex)",
			"Line2D NewLine2D(r32 startX, r32 startY, r32 endX, r32 endY)",
			"Line2D NewLine2DV(v2 start, v2 end)",
			"Line3D NewLine3D(r32 startX, r32 startY, r32 startZ, r32 endX, r32 endY, r32 endZ)",
			"Line3D NewLine3DV(v3 start, v3 end)",
			"ModelData InitModelData(Arena* arena)",
			"ModelData LoadModel(FilePath filePath)",
			"MouseBtn GetMouseBtnFromSokolMouseButton(sapp_mousebutton mouseButton)",
			"OsFileIter OsIterateFiles(Arena* arena, FilePath path, bool includeFiles, bool includeFolders)",
			"PhysicsWorld* InitBulletPhysics(Arena* arena)",
			"Quad2D NewQuad2D(v2 vert0, v2 vert1, v2 vert2, v2 vert3)",
			"Quad3D NewQuad3D(v3 vert0, v3 vert1, v3 vert2, v3 vert3)",
			"Result BakeFontAtlas(Font* font, r32 fontSize, u8 extraStyleFlags, v2i atlasSize, uxx numCharRanges, const FontCharRange* charRanges)",
			"Result DoFontFlow(FontFlowState* state, FontFlowCallbacks* callbacks, FontFlow* flowOut)",
			"Result DoTextLayoutInArena(Arena* arena, FontFlowState* state, TextLayout* layoutOut)",
			"Result GetResultFromCgltfResult(cgltf_result cgltfResult)",
			"Result GfxSystem_DrawText(GfxSystem* system, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextAtSize(GfxSystem* system, r32 fontSize, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextBold(GfxSystem* system, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextItalic(GfxSystem* system, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextWithFont(GfxSystem* system, Font* font, r32 fontSize, u8 styleFlags, Str8 text, v2 position, Color32 color)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result OsReadFromOpenBinFile(OsFile* file, uxx numBytes, void* bufferOut, uxx* numBytesReadOut)",
			"Result OsReadFromOpenFile(OsFile* file, uxx numBytes, bool convertNewLines, void* bufferOut, uxx* numBytesReadOut)",
			"Result OsReadFromOpenTextFile(OsFile* file, uxx numBytes, void* bufferOut, uxx* numBytesReadOut)",
			"Result OsReadPlatformFont(Arena* arena, Str8 fontName, i32 fontSize, bool bold, bool italic, Slice* fileContentsOut)",
			"Result TryLoadGltfFile(FilePath filePath, Arena* arena, ModelData* modelDataOut)",
			"Result TryParseGltfFile(Slice fileContents, Arena* arena, ModelData* modelDataOut)",
			"Result TryParseGltfFileEx(Slice fileContents, Arena* arena, ModelData* modelDataOut, CgltfReadFile_f* readFileFunc, CgltfReleaseFile_f* releaseFileFunc)",
			"Slice OsReadBinFileScratch(FilePath path)",
			"Slice OsReadFileScratch(FilePath path, bool convertNewLines)",
			"Sphere NewSphere(r32 x, r32 y, r32 z, r32 radius)",
			"Sphere NewSphereV(v3 center, r32 radius)",
			"Str8 AllocStrAndCopy(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"Str8 AllocStrAndCopyNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"Str8 JoinStringsInArena(Arena* arena, Str8 left, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArenaWithChar(Arena* arena, Str8 left, char sepChar, Str8 right, bool addNullTerm)",
			"Str8 OsReadTextFileScratch(FilePath path)",
			"Str8 PrintInArenaStr(Arena* arena, const char* formatString, ...)",
			"Str8 ScratchPrintStr(const char* formatString, ...)",
			"Str8 StrReplace(Arena* arena, Str8 str, Str8 target, Str8 replacement, bool addNullTerm)",
			"Str8 StrSliceMaxLength(Str8 target, uxx startIndex, uxx maxLength)",
			"Str8 ToStrFromClay(Clay_String clayString)",
			"TextMeasure MeasureText(const Font* font, Str8 text)",
			"TextMeasure MeasureTextEx(const Font* font, r32 fontSize, u8 styleFlags, Str8 text)",
			"Texture InitTexture(Arena* arena, Str8 name, v2i size, const void* pixelsPntr, u8 flags)",
			"Texture LoadTexture(Arena* arena, const char* path)",
			"Triangle2D NewTriangle2D(v2 vert0, v2 vert1, v2 vert2)",
			"Triangle3D NewTriangle3D(v3 vert0, v3 vert1, v3 vert2)",
			"VertBuffer InitVertBuffer2D(Arena* arena, Str8 name, VertBufferUsage usage, uxx numVertices, const Vertex2D* verticesPntr, bool makeCopy)",
			"VertBuffer InitVertBuffer3D(Arena* arena, Str8 name, VertBufferUsage usage, uxx numVertices, const Vertex3D* verticesPntr, bool makeCopy)",
			"VertBuffer InitVertBufferEx(Arena* arena, Str8 name, VertBufferUsage usage, uxx verticesSize, const void* verticesPntr, uxx numAttributes, const VertAttribute* attributes, bool makeCopy)",
			"Vertex2D NewVertex2D(v2 position, v2 texCoord, v4 color)",
			"Vertex3D NewVertex3D(v3 position, v3 normal, v2 texCoord, v4 color)",
			"bool APP_UPDATE_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi, void* memoryPntr, AppInput* appInput)",
			"bool DoesFontAtlasContainCodepoint(const FontAtlas* atlas, u32 codepoint)",
			"bool DoesFontAtlasContainCodepointEx(const FontAtlas* atlas, u32 codepoint, uxx* glyphIndexOut)",
			"bool HandleSokolKeyboardAndMouseEvents(const sapp_event* event, u64 currentTime, KeyboardState* keyboard, MouseState* mouse, bool isMouseLocked)",
			"bool IsKeyboardKeyDown(KeyboardState* keyboard, Key key)",
			"bool IsKeyboardKeyPressed(KeyboardState* keyboard, Key key)",
			"bool IsKeyboardKeyPressedRepeating(KeyboardState* keyboard, u64 prevTime, u64 currentTime, Key key, u64 repeatDelay, u64 repeatPeriod)",
			"bool IsKeyboardKeyReleased(KeyboardState* keyboard, Key key)",
			"bool IsKeyboardKeyUp(KeyboardState* keyboard, Key key)",
			"bool IsMouseBtnDown(MouseState* mouse, MouseBtn btn)",
			"bool IsMouseBtnPressed(MouseState* mouse, MouseBtn btn)",
			"bool IsMouseBtnPressedRepeating(MouseState* mouse, u64 prevTime, u64 currentTime, MouseBtn btn, u64 repeatDelay, u64 repeatPeriod)",
			"bool IsMouseBtnReleased(MouseState* mouse, MouseBtn btn)",
			"bool IsMouseBtnUp(MouseState* mouse, MouseBtn btn)",
			"bool MemArenaVerifyPaddingAround(const Arena* arena, const void* allocPntr, uxx allocSize, bool assertOnFailure)",
			"bool OsDoesFileExist(FilePath path)",
			"bool OsDoesFileOrFolderExist(FilePath path, bool* isFolderOut)",
			"bool OsDoesFolderExist(FilePath path)",
			"bool OsIterFileStep(OsFileIter* fileIter, FilePath* pathOut, Arena* pathOutArena, bool giveFullPath)",
			"bool OsIterFileStepEx(OsFileIter* fileIter, bool* isFolderOut, FilePath* pathOut, Arena* pathOutArena, bool giveFullPath)",
			"bool OsOpenFile(Arena* arena, FilePath path, OsOpenFileMode mode, bool calculateSize, OsFile* openFileOut)",
			"bool OsReadBinFile(FilePath path, Arena* arena, Slice* contentsOut)",
			"bool OsReadFile(FilePath path, Arena* arena, bool convertNewLines, Str8* contentsOut)",
			"bool OsReadTextFile(FilePath path, Arena* arena, Str8* contentsOut)",
			"bool OsWriteBinFile(FilePath path, Str8 fileContents)",
			"bool OsWriteFile(FilePath path, Str8 fileContents, bool convertNewLines)",
			"bool OsWriteTextFile(FilePath path, Str8 fileContents)",
			"bool OsWriteToOpenBinFile(OsFile* file, Str8 fileContentsPart)",
			"bool OsWriteToOpenFile(OsFile* file, Str8 fileContentsPart, bool convertNewLines)",
			"bool OsWriteToOpenTextFile(OsFile* file, Str8 fileContentsPart)",
			"bool UpdateBtnState(BtnState* state, u64 currentTime, bool isDown)",
			"box BothBox(box left, box right)",
			"box RelativeBox(box reference, box subReference, box other)",
			"boxi BothBoxi(boxi left, boxi right)",
			"cgltf_result CGLTF_READ_FILE_FUNC_DEF(const cgltf_memory_options* memoryOptions, const cgltf_file_options* fileOptions, const char* path, cgltf_size* size, void** data)",
			"char* AllocAndCopyChars(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"char* AllocAndCopyCharsNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"char* PrintInArena(Arena* arena, const char* formatString, ...)",
			"char* ScratchPrint(const char* formatString, ...)",
			"const char* GetContBtnStr(ContBtn enumValue)",
			"const char* GetGfxPipelineBlendModeStr(GfxPipelineBlendMode enumValue)",
			"const char* GetModifierKeyShortStr(ModifierKey enumValue)",
			"const char* GetMouseBtnStr(MouseBtn enumValue)",
			"const void* GET_NATIVE_WINDOW_HANDLE_DEF()",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"r32 GetDefaultFontSize(const Font* font)",
			"r32 GetFontKerningBetweenCodepoints(const Font* font, r32 fontSize, u8 styleFlags, u32 leftCodepoint, u32 rightCodepoint)",
			"r32 GetFontKerningBetweenGlyphs(const Font* font, r32 fontScale, const FontGlyph* leftGlyph, const FontGlyph* rightGlyph)",
			"rec BothRec(rec left, rec right)",
			"rec RelativeRec(rec reference, rec subReference, rec other)",
			"rec ToRecFromClay(Clay_BoundingBox clayBoundingBox)",
			"rec ToRecFromV4(v4 vector)",
			"reci BothReci(reci left, reci right)",
			"sg_backend GetSokolBackend()",
			"sg_environment CreateSokolAppEnvironment()",
			"sg_swapchain GET_SOKOL_SWAPCHAIN_DEF()",
			"sg_swapchain GetSokolAppSwapchain()",
			"u16 AddClayUIRendererFont(ClayUIRenderer* renderer, PigFont* fontPntr, u8 styleFlags)",
			"u16 GetClayUIRendererFontId(ClayUIRenderer* renderer, PigFont* fontPntr, u8 styleFlags)",
			"u8 GetDefaultFontStyleFlags(const Font* font)",
			"uxx OsGetFullPathLength(FilePath relativePath)",
			"v2 ToV2FromClay(Clay_Vector2 clayVec)",
			"v2 ToV2FromImgui(ImVec2 vector)",
			"v2 ToV2iFromClay(Clay_Dimensions clayDimensions)",
			"v4 ToV4FromImgui(ImVec4 vector)",
			"v4 ToV4FromRec(rec rectangle)",
			"v4r ToV4rFromRec(rec rectangle)",
			"void AddIndicesToVertBufferEx(VertBuffer* buffer, uxx indexSize, uxx numIndices, const void* indicesPntr, bool makeCopy)",
			"void AddIndicesToVertBufferU16(VertBuffer* buffer, uxx numIndices, const u16* indicesPntr, bool makeCopy)",
			"void AddIndicesToVertBufferU32(VertBuffer* buffer, uxx numIndices, const u32* indicesPntr, bool makeCopy)",
			"void AddIndicesToVertBufferU64(VertBuffer* buffer, uxx numIndices, const u64* indicesPntr, bool makeCopy)",
			"void AddIndicesToVertBufferU8(VertBuffer* buffer, uxx numIndices, const u8* indicesPntr, bool makeCopy)",
			"void AddKeyboardCharInput(KeyboardState* keyboard, u32 codepoint, u8 modifierKeys)",
			"void AttachTtfFileToFont(Font* font, Slice ttfFileContents, u8 ttfStyleFlags)",
			"void BeginClayUIRender(ClayUI* clay, v2 windowSize, r32 frameTime, bool isMouseOverOther, v2 mousePos, bool isMouseDown, v2 mouseScrollDelta)",
			"void CGLTF_RELEASE_FILE_FUNC_DEF(const cgltf_memory_options* memoryOptions, const cgltf_file_options* fileOptions, void* data)",
			"void ChangeIndicesInVertBufferEx(VertBuffer* buffer, uxx numIndices, uxx indexSize, const void* indicesPntr)",
			"void ChangeIndicesInVertBufferU16(VertBuffer* buffer, uxx numIndices, const u16* indicesPntr)",
			"void ChangeIndicesInVertBufferU32(VertBuffer* buffer, uxx numIndices, const u32* indicesPntr)",
			"void ChangeIndicesInVertBufferU64(VertBuffer* buffer, uxx numIndices, const u64* indicesPntr)",
			"void ChangeIndicesInVertBufferU8(VertBuffer* buffer, uxx numIndices, const u8* indicesPntr)",
			"void ChangeVerticesInVertBuffer2D(VertBuffer* buffer, uxx numVertices, const Vertex2D* verticesPntr)",
			"void ChangeVerticesInVertBuffer3D(VertBuffer* buffer, uxx numVertices, const Vertex3D* verticesPntr)",
			"void ChangeVerticesInVertBufferEx(VertBuffer* buffer, uxx numVertices, uxx vertexSize, const void* verticesPntr)",
			"void ClayText(const char* textNullTerm, u16 fontId, u16 fontSize, Color32 color)",
			"void ClayTextStr(Str8 text, u16 fontId, u16 fontSize, Color32 color)",
			"void DrawModel(Model3D* model, v3 position, v3 scale, quat rotation)",
			"void FONT_FLOW_AFTER_CHAR_DEF(FontFlowState* state, FontFlow* flow, rec glyphDrawRec, u32 codepoint, FontAtlas* atlas, FontGlyph* glyph, r32 kerning)",
			"void FONT_FLOW_BEFORE_CHAR_DEF(FontFlowState* state, FontFlow* flow, u32 codepoint)",
			"void FONT_FLOW_DRAW_CHAR_DEF(FontFlowState* state, FontFlow* flow, rec glyphDrawRec, u32 codepoint, FontAtlas* atlas, FontGlyph* glyph)",
			"void FillFontKerningTable(Font* font)",
			"void FlushGfxSystemBindings(GfxSystem* system)",
			"void FlushGfxSystemPipelineGen(GfxSystem* system)",
			"void FreeFont(Font* font)",
			"void FreeFontKerningTable(Arena* arena, FontKerningTable* kerningTable)",
			"void FreeGfxSystem(GfxSystem* system)",
			"void FreeImageData(Arena* arena, ImageData* imageData)",
			"void FreeModelData(ModelData* modelData)",
			"void FreeModelDataMaterial(Arena* arena, ModelDataMaterial* material)",
			"void FreeModelDataPart(Arena* arena, ModelDataPart* part)",
			"void FreeStr8(Arena* arena, Str8* stringPntr)",
			"void FreeStr8WithNt(Arena* arena, Str8* stringPntr)",
			"void FreeTextLayout(TextLayout* layout)",
			"void FreeTexture(Texture* texture)",
			"void FreeVertBuffer(VertBuffer* buffer)",
			"void FreeVertBuffer(VertBuffer* buffer)",
			"void GfxSystem_BeginFrame(GfxSystem* system, sg_swapchain swapchain, v2i screenSize, Color32 clearColor, r32 clearDepth)",
			"void GfxSystem_BindFont(GfxSystem* system, Font* font)",
			"void GfxSystem_BindFontAtSize(GfxSystem* system, Font* font, r32 fontSize)",
			"void GfxSystem_BindFontEx(GfxSystem* system, Font* font, r32 fontSize, u8 fontStyleFlags)",
			"void GfxSystem_BindShader(GfxSystem* system, Shader* shader)",
			"void GfxSystem_BindTexture(GfxSystem* system, Texture* texture)",
			"void GfxSystem_BindTextureAtIndex(GfxSystem* system, Texture* texture, uxx textureIndex)",
			"void GfxSystem_BindVertBuffer(GfxSystem* system, VertBuffer* buffer)",
			"void GfxSystem_ClearDepthBuffer(GfxSystem* system, r32 clearDepth)",
			"void GfxSystem_DisableClipRec(GfxSystem* system)",
			"void GfxSystem_DrawCircle(GfxSystem* system, Circle circle, Color32 color)",
			"void GfxSystem_DrawCirclePiece(GfxSystem* system, Circle circle, r32 angleMin, r32 angleMax, Color32 color)",
			"void GfxSystem_DrawObb2(GfxSystem* system, obb2 boundingBox, Color32 color)",
			"void GfxSystem_DrawRectangle(GfxSystem* system, rec rectangle, Color32 color)",
			"void GfxSystem_DrawRectangleOutline(GfxSystem* system, rec rectangle, r32 borderThickness, Color32 color)",
			"void GfxSystem_DrawRectangleOutlineEx(GfxSystem* system, rec rectangle, r32 borderThickness, Color32 color, bool outside)",
			"void GfxSystem_DrawRectangleOutlineSides(GfxSystem* system, rec rectangle, r32 leftThickness, r32 rightThickness, r32 topThickness, r32 bottomThickness, Color32 color)",
			"void GfxSystem_DrawRectangleOutlineSidesEx(GfxSystem* system, rec rectangle, r32 leftThickness, r32 rightThickness, r32 topThickness, r32 bottomThickness, Color32 color, bool outside)",
			"void GfxSystem_DrawRing(GfxSystem* system, Circle circle, r32 thickness, Color32 color)",
			"void GfxSystem_DrawRingPiece(GfxSystem* system, Circle circle, r32 thickness, r32 angleMin, r32 angleMax, Color32 color)",
			"void GfxSystem_DrawRoundedRectangle(GfxSystem* system, rec rectangle, r32 radius, Color32 color)",
			"void GfxSystem_DrawRoundedRectangleEx(GfxSystem* system, rec rectangle, r32 radiusTL, r32 radiusTR, r32 radiusBR, r32 radiusBL, Color32 color)",
			"void GfxSystem_DrawRoundedRectangleOutline(GfxSystem* system, rec rectangle, r32 thickness, r32 radius, Color32 color)",
			"void GfxSystem_DrawRoundedRectangleOutlineEx(GfxSystem* system, rec rectangle, r32 thickness, r32 radiusTL, r32 radiusTR, r32 radiusBR, r32 radiusBL, Color32 color, bool outside)",
			"void GfxSystem_DrawTexturedCircle(GfxSystem* system, Circle circle, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedCircleEx(GfxSystem* system, Circle circle, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedCirclePiece(GfxSystem* system, Circle circle, r32 angleMin, r32 angleMax, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedCirclePieceEx(GfxSystem* system, Circle circle, r32 angleMin, r32 angleMax, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedObb2(GfxSystem* system, obb2 boundingBox, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedObb2Ex(GfxSystem* system, obb2 boundingBox, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRectangle(GfxSystem* system, rec rectangle, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedRectangleEx(GfxSystem* system, rec rectangle, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRectangleOutline(GfxSystem* system, rec rectangle, r32 borderThickness, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedRectangleOutlineEx(GfxSystem* system, rec rectangle, r32 borderThickness, Color32 color, bool outside, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRectangleOutlineSides(GfxSystem* system, rec rectangle, r32 leftThickness, r32 rightThickness, r32 topThickness, r32 bottomThickness, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedRectangleOutlineSidesEx(GfxSystem* system, rec rectangle, r32 leftThickness, r32 rightThickness, r32 topThickness, r32 bottomThickness, Color32 color, bool outside, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRing(GfxSystem* system, Circle circle, r32 thickness, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedRingEx(GfxSystem* system, Circle circle, r32 thickness, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRingPiece(GfxSystem* system, Circle circle, r32 thickness, r32 angleMin, r32 angleMax, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedRingPieceEx(GfxSystem* system, Circle circle, r32 thickness, r32 angleMin, r32 angleMax, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRoundedRectangle(GfxSystem* system, rec rectangle, r32 radius, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRoundedRectangleEx(GfxSystem* system, rec rectangle, r32 radiusTL, r32 radiusTR, r32 radiusBR, r32 radiusBL, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRoundedRectangleOutline(GfxSystem* system, rec rectangle, r32 thickness, r32 radius, Color32 color, bool outside, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRoundedRectangleOutlineEx(GfxSystem* system, rec rectangle, r32 thickness, r32 radiusTL, r32 radiusTR, r32 radiusBR, r32 radiusBL, Color32 color, bool outside, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawVertices(GfxSystem* system)",
			"void GfxSystem_DrawVerticesEx(GfxSystem* system, uxx startVertexOrIndex, uxx numVerticesOrIndices)",
			"void GfxSystem_EndFrame(GfxSystem* system)",
			"void GfxSystem_FlushBindings(GfxSystem* system)",
			"void GfxSystem_FlushPipelineGen(GfxSystem* system)",
			"void GfxSystem_ImguiBeginFrame(GfxSystem* system, ImguiUI* imgui)",
			"void GfxSystem_ImguiEndFrame(GfxSystem* system, ImguiUI* imgui)",
			"void GfxSystem_RenderImDrawData(GfxSystem* system, Arena* vertBufferArena, VertBuffer* vertBuffer, ImDrawData* drawData)",
			"void GfxSystem_SetBlendMode(GfxSystem* system, GfxPipelineBlendMode blendMode)",
			"void GfxSystem_SetClipRec(GfxSystem* system, reci clipRec)",
			"void GfxSystem_SetColorWriteEnabled(GfxSystem* system, bool colorWriteEnabled)",
			"void GfxSystem_SetCullingEnabled(GfxSystem* system, bool cullingEnabled)",
			"void GfxSystem_SetDepth(GfxSystem* system, r32 depth)",
			"void GfxSystem_SetDepthTestEnabled(GfxSystem* system, bool depthTestEnabled)",
			"void GfxSystem_SetDepthWriteEnabled(GfxSystem* system, bool depthWriteEnabled)",
			"void GfxSystem_SetProjectionMat(GfxSystem* system, mat4 matrix)",
			"void GfxSystem_SetSourceRec(GfxSystem* system, rec rectangle)",
			"void GfxSystem_SetSourceRecRaw(GfxSystem* system, v4r rectangle)",
			"void GfxSystem_SetTintColor(GfxSystem* system, Color32 color)",
			"void GfxSystem_SetTintColorRaw(GfxSystem* system, v4r colorVec)",
			"void GfxSystem_SetVertexOffset(GfxSystem* system, uxx vertexOffset)",
			"void GfxSystem_SetViewMat(GfxSystem* system, mat4 matrix)",
			"void GfxSystem_SetWorldMat(GfxSystem* system, mat4 matrix)",
			"void InitBtnState(BtnState* state, bool startedDown)",
			"void InitClayUI(Arena* arena, v2 windowSize, ClayUiMeasureText_f* measureTextFunc, void* measureUserData, ClayUI* clayOut)",
			"void InitClayUIRenderer(Arena* arena, v2 windowSize, ClayUIRenderer* rendererOut)",
			"void InitFont(Font* font, Arena* arena)",
			"void InitFontTtfInfo(Font* font)",
			"void InitGfxSystem(Arena* arena, GfxSystem* systemOut)",
			"void InitKeyboardState(KeyboardState* keyboard)",
			"void InitMouseState(MouseState* mouse)",
			"void InitSokolGraphics(sg_desc sokolGraphicsDesc)",
			"void OsCloseFile(OsFile* file)",
			"void OsFreeFileIter(OsFileIter* fileIter)",
			"void Plat_SetMouseLocked(bool isMouseLocked)",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void RasterizeFontAtSize(Font* font, Str8 fontName, r32 fontSize, u8 fontStyleFlags)",
			"void RasterizeFontAtSizes(Font* font, Str8 fontName, uxx numSizes, r32* fontSizes, u8 fontStyleFlags)",
			"void RefreshBtnState(BtnState* state)",
			"void RefreshKeyboardState(KeyboardState* keyboard)",
			"void RefreshMouseState(MouseState* mouse, bool isMouseLocked, v2 lockedMouseAbsolutePosition)",
			"void RemoveAttachedTtfFile(Font* font)",
			"void RenderClayCommandArray(ClayUIRenderer* renderer, GfxSystem* system, Clay_RenderCommandArray* commands)",
			"void SET_MOUSE_CURSOR_TYPE_DEF(sapp_mouse_cursor cursorType)",
			"void SET_MOUSE_LOCKED_DEF(bool isMouseLocked)",
			"void SET_WINDOW_ICON_DEF(uxx numIconSizes, const ImageData* iconSizes)",
			"void SET_WINDOW_TITLE_DEF(Str8 windowTitle)",
			"void SetTextureFilePath(Texture* texture, Str8 filePath)",
			"void ShutdownSokolGraphics()",
			"void SokolLogCallback(const char* tag, u32 logLevel, u32 logId, const char* message, u32 lineNum, const char* filePath, void* userData)",
			"void TwoPassPrint(char* resultPntr, u64 resultLength, u64* currentByteIndex, const char* formatString, ...)",
			"void UpdateImguiInput(ImguiUI* imgui, const ImguiInput* input, ImguiOutput* output)",
			"void UpdateKeyboardKey(KeyboardState* keyboard, u64 currentTime, Key key, bool pressed)",
			"void UpdateMouseBtn(MouseState* mouse, u64 currentTime, MouseBtn btn, bool pressed)",
			"void UpdateMouseLockedDelta(MouseState* mouse, u64 currentTime, v2 lockedPosDelta)",
			"void UpdateMouseOverWindow(MouseState* mouse, u64 currentTime, bool isMouseOverWindow)",
			"void UpdateMousePosition(MouseState* mouse, u64 currentTime, v2 newPosition)",
			"void UpdateMouseScroll(MouseState* mouse, u64 currentTime, v2 scrollDelta)",
			"void* APP_INIT_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi)",
			"void* OsFindDllFunc(OsDll* dll, Str8 funcName)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AppGetApi_f",
			"AppInit_f",
			"AppInput",
			"CgltfReadFile_f",
			"CgltfReleaseFile_f",
			"Circle",
			"ClayUIRenderer",
			"ClayUIRendererFont",
			"ContBtn",
			"Font",
			"FontAtlas",
			"FontCharRange",
			"FontFlow",
			"FontFlowAfterChar_f",
			"FontFlowBeforeChar_f",
			"FontFlowCallbacks",
			"FontFlowDrawChar_f",
			"FontFlowGlyph",
			"FontFlowState",
			"FontGlyph",
			"FontKerningTable",
			"FontKerningTableEntry",
			"FontStyleFlag",
			"GeneratedMesh",
			"GetNativeWindowHandle_f",
			"GfxPipelineBlendMode",
			"ImguiInput",
			"ImguiOutput",
			"ImguiUI",
			"Key",
			"KeyboardCharInput",
			"Model3D",
			"ModelDataPart",
			"ModelDataTexture",
			"ModelDataTransform",
			"ModifierKey",
			"MouseBtn",
			"PhysicsWorld",
			"PlatformApi",
			"SetMouseCursorType_f",
			"SetMouseLocked_f",
			"SetWindowIcon_f",
			"SetWindowTitle_f",
			"TextLayout",
			"TextMeasure",
		],
	},
}
