{
	"folders":
	[
		{
			"name": "Game",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BOX_MESH_NUM_INDICES_PER_FACES",
			"BOX_MESH_NUM_VERTICES_PER_FACES",
			"BOX_NUM_FACES",
		],
		"custom_functions":
		[
			"AppApi APP_GET_API_DEF()",
			"Circle NewCircle(r32 x, r32 y, r32 radius)",
			"Circle NewCircleV(v2 center, r32 radius)",
			"GeneratedMesh GenerateVertsForBox(Arena* arena, Box boundingBox, Color32 color)",
			"GeneratedMesh GenerateVertsForBoxEx(Arena* arena, Box boundingBox, Color32* colors)",
			"GeneratedMesh GenerateVertsForSphere(Arena* arena, Sphere sphere, uxx numRings, uxx numSegments, Color32 color)",
			"Quad2D NewQuad2D(v2 vert0, v2 vert1, v2 vert2, v2 vert3)",
			"Quad3D NewQuad3D(v3 vert0, v3 vert1, v3 vert2, v3 vert3)",
			"Sphere NewSphere(r32 x, r32 y, r32 z, r32 radius)",
			"Sphere NewSphereV(v3 center, r32 radius)",
			"Texture LoadTexture(Arena* arena, const char* path)",
			"Triangle2D NewTriangle2D(v2 vert0, v2 vert1, v2 vert2)",
			"Triangle3D NewTriangle3D(v3 vert0, v3 vert1, v3 vert2)",
			"Vertex2D NewVertex2D(v2 position, v2 texCoord, v4 color)",
			"Vertex3D NewVertex3D(v3 position, v3 normal, v2 texCoord, v4 color)",
			"bool APP_UPDATE_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi, void* memoryPntr)",
			"sg_backend GetSokolBackend()",
			"sg_swapchain GET_SOKOL_SWAPCHAIN_DEF()",
			"void InitSokolGraphics(sg_desc sokolGraphicsDesc)",
			"void ShutdownSokolGraphics()",
			"void* APP_INIT_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AppGetApi_f",
			"AppInit_f",
			"Circle",
			"GeneratedMesh",
			"GetWindowSize_f",
			"PlatformApi",
		],
	},
}
