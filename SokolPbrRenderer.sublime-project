{
	"folders":
	[
		{
			"name": "Game",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BOX_MESH_NUM_INDICES_PER_FACES",
			"BOX_MESH_NUM_VERTICES_PER_FACES",
			"BOX_NUM_FACES",
			"BUILD_WITH_SOKOL_APP",
			"BUILD_WITH_SOKOL_GFX",
			"ContBtn_A",
			"ContBtn_B",
			"ContBtn_Back",
			"ContBtn_Console",
			"ContBtn_Count",
			"ContBtn_Down",
			"ContBtn_Left",
			"ContBtn_LeftBumper",
			"ContBtn_LeftStick",
			"ContBtn_LeftTrigger",
			"ContBtn_Microphone",
			"ContBtn_None",
			"ContBtn_Pad",
			"ContBtn_Right",
			"ContBtn_RightBumper",
			"ContBtn_RightStick",
			"ContBtn_RightTrigger",
			"ContBtn_Start",
			"ContBtn_Up",
			"ContBtn_X",
			"ContBtn_Y",
			"ContBtn_lsDown",
			"ContBtn_lsLeft",
			"ContBtn_lsRight",
			"ContBtn_lsUp",
			"ContBtn_rsDown",
			"ContBtn_rsLeft",
			"ContBtn_rsRight",
			"ContBtn_rsUp",
			"FontStyleFlag_All",
			"FontStyleFlag_Bold",
			"FontStyleFlag_Inverted",
			"FontStyleFlag_Italic",
			"FontStyleFlag_None",
			"FontStyleFlag_Outline",
			"FontStyleFlag_Strikethrough",
			"FontStyleFlag_Underline",
			"GfxPipelineBlendMode_Count",
			"GfxPipelineBlendMode_None",
			"GfxPipelineBlendMode_Normal",
			"GfxPipelineBlendMode_Opaque",
			"GfxPipelineBlendMode_PremultipliedNormal",
			"Key_0",
			"Key_1",
			"Key_2",
			"Key_3",
			"Key_4",
			"Key_5",
			"Key_6",
			"Key_7",
			"Key_8",
			"Key_9",
			"Key_A",
			"Key_Alt",
			"Key_B",
			"Key_Backspace",
			"Key_C",
			"Key_CapsLock",
			"Key_CloseBracket",
			"Key_Colon",
			"Key_Comma",
			"Key_Command",
			"Key_Control",
			"Key_Count",
			"Key_D",
			"Key_Delete",
			"Key_Digit0",
			"Key_Digit1",
			"Key_Digit2",
			"Key_Digit3",
			"Key_Digit4",
			"Key_Digit5",
			"Key_Digit6",
			"Key_Digit7",
			"Key_Digit8",
			"Key_Digit9",
			"Key_Down",
			"Key_E",
			"Key_End",
			"Key_Enter",
			"Key_Escape",
			"Key_F",
			"Key_F1",
			"Key_F10",
			"Key_F11",
			"Key_F12",
			"Key_F2",
			"Key_F3",
			"Key_F4",
			"Key_F5",
			"Key_F6",
			"Key_F7",
			"Key_F8",
			"Key_F9",
			"Key_ForwardSlash",
			"Key_G",
			"Key_H",
			"Key_Home",
			"Key_I",
			"Key_Insert",
			"Key_J",
			"Key_K",
			"Key_L",
			"Key_Left",
			"Key_LeftAlt",
			"Key_LeftCommand",
			"Key_LeftControl",
			"Key_LeftOption",
			"Key_LeftShift",
			"Key_LeftWindows",
			"Key_M",
			"Key_Minus",
			"Key_N",
			"Key_None",
			"Key_NumLock",
			"Key_Numpad0",
			"Key_Numpad1",
			"Key_Numpad2",
			"Key_Numpad3",
			"Key_Numpad4",
			"Key_Numpad5",
			"Key_Numpad6",
			"Key_Numpad7",
			"Key_Numpad8",
			"Key_Numpad9",
			"Key_NumpadAdd",
			"Key_NumpadDivide",
			"Key_NumpadEnter",
			"Key_NumpadMultiply",
			"Key_NumpadPeriod",
			"Key_NumpadSubtract",
			"Key_O",
			"Key_OpenBracket",
			"Key_Option",
			"Key_P",
			"Key_PageDown",
			"Key_PageUp",
			"Key_Pause",
			"Key_Period",
			"Key_Pipe",
			"Key_Plus",
			"Key_PrimaryEnter",
			"Key_PrintScreen",
			"Key_Q",
			"Key_Quote",
			"Key_R",
			"Key_Right",
			"Key_RightAlt",
			"Key_RightCommand",
			"Key_RightControl",
			"Key_RightOption",
			"Key_RightShift",
			"Key_RightWindows",
			"Key_S",
			"Key_ScrollLock",
			"Key_Shift",
			"Key_Space",
			"Key_T",
			"Key_Tab",
			"Key_Tilde",
			"Key_U",
			"Key_Up",
			"Key_V",
			"Key_W",
			"Key_Windows",
			"Key_X",
			"Key_Y",
			"Key_Z",
			"MAX_ALT_KEY_MAPPINGS",
			"ModifierKey_All",
			"ModifierKey_Alt",
			"ModifierKey_Control",
			"ModifierKey_None",
			"ModifierKey_Shift",
			"MouseBtn_Count",
			"MouseBtn_Extra1",
			"MouseBtn_Extra2",
			"MouseBtn_Left",
			"MouseBtn_Middle",
			"MouseBtn_None",
			"MouseBtn_Right",
			"MouseBtn_Scroll",
			"MouseBtn_ScrollDown",
			"MouseBtn_ScrollUp",
			"Result_EmptyFile",
			"Result_NoDeviceContext",
			"Result_NoForegroundWindow",
			"Result_NotFound",
		],
		"custom_functions":
		[
			"#define BindFont(fontPntr)",
			"#define BindFontAtSize(fontPntr, fontSize)",
			"#define BindFontEx(fontPntr, fontSize, fontStyleFlags)",
			"#define ClearDepthBuffer(clearDepth)",
			"#define DrawObb2(boundingBox, color)",
			"#define DrawRectangle(rectangle, color)",
			"#define DrawText(text, position, color)",
			"#define DrawTextAtSize(fontSize, text, position, color)",
			"#define DrawTextBold(text, position, color)",
			"#define DrawTextItalic(text, position, color)",
			"#define DrawTexturedObb2(boundingBox, color, texture)",
			"#define DrawTexturedObb2Ex(boundingBox, color, texture, sourceRec)",
			"#define DrawTexturedRectangle(rectangle, color, texture)",
			"#define DrawTexturedRectangleEx(rectangle, color, texture, sourceRec)",
			"#define SetColorWriteEnabled(colorWriteEnabled)",
			"#define SetCullingEnabled(cullingEnabled)",
			"#define SetDepth(depth)",
			"#define SetDepthTestEnabled(depthTestEnabled)",
			"#define SetDepthWriteEnabled(depthWriteEnabled)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"AppApi APP_GET_API_DEF()",
			"Circle NewCircle(r32 x, r32 y, r32 radius)",
			"Circle NewCircleV(v2 center, r32 radius)",
			"FontAtlas* GetDefaultFontAtlas(Font* font)",
			"FontGlyph* GetFontGlyphForCodepoint(Font* font, u32 codepoint, r32 fontSize, u8 styleFlags, FontAtlas** atlasOut)",
			"GeneratedMesh GenerateVertsForBox(Arena* arena, Box boundingBox, Color32 color)",
			"GeneratedMesh GenerateVertsForBoxEx(Arena* arena, Box boundingBox, Color32* colors)",
			"GeneratedMesh GenerateVertsForSphere(Arena* arena, Sphere sphere, uxx numRings, uxx numSegments, Color32 color)",
			"GfxPipeline* FindGfxSystemPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"GfxPipeline* FindOrAddGfxSystemPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"GfxPipeline* GfxSystem_FindOrAddPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"GfxPipeline* GfxSystem_FindPipelineWithOptions(GfxSystem* system, const GfxPipelineOptions* options)",
			"Key GetKeyFromSokolKeycodeEx(sapp_keycode keycode, u8 alternateIndex)",
			"Key GetNonAltKeyForKey(Key key, u8 primaryIndex)",
			"Line2D NewLine2D(r32 startX, r32 startY, r32 endX, r32 endY)",
			"Line2D NewLine2DV(v2 start, v2 end)",
			"Line3D NewLine3D(r32 startX, r32 startY, r32 startZ, r32 endX, r32 endY, r32 endZ)",
			"Line3D NewLine3DV(v3 start, v3 end)",
			"MouseBtn GetMouseBtnFromSokolMouseButton(sapp_mousebutton mouseButton)",
			"Quad2D NewQuad2D(v2 vert0, v2 vert1, v2 vert2, v2 vert3)",
			"Quad3D NewQuad3D(v3 vert0, v3 vert1, v3 vert2, v3 vert3)",
			"Result DoFontFlow(FontFlowState* state, FontFlowCallbacks* callbacks, FontFlow* flowOut)",
			"Result DoTextLayoutInArena(Arena* arena, FontFlowState* state, TextLayout* layoutOut)",
			"Result GfxSystem_DrawText(GfxSystem* system, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextAtSize(GfxSystem* system, r32 fontSize, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextBold(GfxSystem* system, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextItalic(GfxSystem* system, Str8 text, v2 position, Color32 color)",
			"Result GfxSystem_DrawTextWithFont(GfxSystem* system, Font* font, r32 fontSize, u8 styleFlags, Str8 text, v2 position, Color32 color)",
			"Result OsReadPlatformFont(Arena* arena, Str8 fontName, i32 fontSize, bool bold, bool italic, Slice* fileContentsOut)",
			"Sphere NewSphere(r32 x, r32 y, r32 z, r32 radius)",
			"Sphere NewSphereV(v3 center, r32 radius)",
			"TextMeasure MeasureText(const Font* font, Str8 text)",
			"TextMeasure MeasureTextEx(const Font* font, r32 fontSize, u8 styleFlags, Str8 text)",
			"Texture LoadTexture(Arena* arena, const char* path)",
			"Triangle2D NewTriangle2D(v2 vert0, v2 vert1, v2 vert2)",
			"Triangle3D NewTriangle3D(v3 vert0, v3 vert1, v3 vert2)",
			"Vertex2D NewVertex2D(v2 position, v2 texCoord, v4 color)",
			"Vertex3D NewVertex3D(v3 position, v3 normal, v2 texCoord, v4 color)",
			"bool APP_UPDATE_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi, void* memoryPntr, AppInput* appInput)",
			"bool DoesFontAtlasContainCodepoint(const FontAtlas* atlas, u32 codepoint)",
			"bool DoesFontAtlasContainCodepointEx(const FontAtlas* atlas, u32 codepoint, uxx* glyphIndexOut)",
			"bool HandleSokolKeyboardAndMouseEvents(const sapp_event* event, u64 currentTime, KeyboardState* keyboard, MouseState* mouse, bool isMouseLocked)",
			"bool IsKeyboardKeyDown(KeyboardState* keyboard, Key key)",
			"bool IsKeyboardKeyPressed(KeyboardState* keyboard, Key key)",
			"bool IsKeyboardKeyPressedRepeating(KeyboardState* keyboard, u64 prevTime, u64 currentTime, Key key, u64 repeatDelay, u64 repeatPeriod)",
			"bool IsKeyboardKeyReleased(KeyboardState* keyboard, Key key)",
			"bool IsKeyboardKeyUp(KeyboardState* keyboard, Key key)",
			"bool IsMouseBtnDown(MouseState* mouse, MouseBtn btn)",
			"bool IsMouseBtnPressed(MouseState* mouse, MouseBtn btn)",
			"bool IsMouseBtnPressedRepeating(MouseState* mouse, u64 prevTime, u64 currentTime, MouseBtn btn, u64 repeatDelay, u64 repeatPeriod)",
			"bool IsMouseBtnReleased(MouseState* mouse, MouseBtn btn)",
			"bool IsMouseBtnUp(MouseState* mouse, MouseBtn btn)",
			"bool UpdateBtnState(BtnState* state, u64 currentTime, bool isDown)",
			"box BothBox(box left, box right)",
			"boxi BothBoxi(boxi left, boxi right)",
			"const char* GetContBtnStr(ContBtn enumValue)",
			"const char* GetGfxPipelineBlendModeStr(GfxPipelineBlendMode enumValue)",
			"const char* GetModifierKeyShortStr(ModifierKey enumValue)",
			"const char* GetMouseBtnStr(MouseBtn enumValue)",
			"r32 GetDefaultFontSize(const Font* font)",
			"rec BothRec(rec left, rec right)",
			"rec ToRecFromV4(v4 vector)",
			"reci BothReci(reci left, reci right)",
			"sg_backend GetSokolBackend()",
			"sg_environment CreateSokolAppEnvironment()",
			"sg_swapchain GET_SOKOL_SWAPCHAIN_DEF()",
			"sg_swapchain GetSokolAppSwapchain()",
			"u8 GetDefaultFontStyleFlags(const Font* font)",
			"v4 ToV4FromRec(rec rectangle)",
			"v4r ToV4rFromRec(rec rectangle)",
			"void FONT_FLOW_AFTER_CHAR_DEF(FontFlowState* state, FontFlow* flow, rec glyphDrawRec, u32 codepoint, FontAtlas* atlas, FontGlyph* glyph)",
			"void FONT_FLOW_BEFORE_CHAR_DEF(FontFlowState* state, FontFlow* flow, u32 codepoint)",
			"void FONT_FLOW_DRAW_CHAR_DEF(FontFlowState* state, FontFlow* flow, rec glyphDrawRec, u32 codepoint, FontAtlas* atlas, FontGlyph* glyph)",
			"void FlushGfxSystemBindings(GfxSystem* system)",
			"void FlushGfxSystemPipelineGen(GfxSystem* system)",
			"void FreeFont(Font* font)",
			"void FreeGfxSystem(GfxSystem* system)",
			"void FreeTextLayout(TextLayout* layout)",
			"void GfxSystem_BeginFrame(GfxSystem* system, sg_swapchain swapchain, Color32 clearColor, r32 clearDepth)",
			"void GfxSystem_BindFont(GfxSystem* system, Font* font)",
			"void GfxSystem_BindFontAtSize(GfxSystem* system, Font* font, r32 fontSize)",
			"void GfxSystem_BindFontEx(GfxSystem* system, Font* font, r32 fontSize, u8 fontStyleFlags)",
			"void GfxSystem_BindShader(GfxSystem* system, Shader* shader)",
			"void GfxSystem_BindTexture(GfxSystem* system, Texture* texture)",
			"void GfxSystem_BindTextureAtIndex(GfxSystem* system, Texture* texture, uxx textureIndex)",
			"void GfxSystem_BindVertBuffer(GfxSystem* system, VertBuffer* buffer)",
			"void GfxSystem_ClearDepthBuffer(GfxSystem* system, r32 clearDepth)",
			"void GfxSystem_DrawObb2(GfxSystem* system, obb2 boundingBox, Color32 color)",
			"void GfxSystem_DrawRectangle(GfxSystem* system, rec rectangle, Color32 color)",
			"void GfxSystem_DrawTexturedObb2(GfxSystem* system, obb2 boundingBox, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedObb2Ex(GfxSystem* system, obb2 boundingBox, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawTexturedRectangle(GfxSystem* system, rec rectangle, Color32 color, Texture* texture)",
			"void GfxSystem_DrawTexturedRectangleEx(GfxSystem* system, rec rectangle, Color32 color, Texture* texture, rec sourceRec)",
			"void GfxSystem_DrawVertices(GfxSystem* system)",
			"void GfxSystem_DrawVerticesEx(GfxSystem* system, uxx startVertex, uxx numVertices)",
			"void GfxSystem_EndFrame(GfxSystem* system)",
			"void GfxSystem_FlushBindings(GfxSystem* system)",
			"void GfxSystem_FlushPipelineGen(GfxSystem* system)",
			"void GfxSystem_SetBlendMode(GfxSystem* system, GfxPipelineBlendMode blendMode)",
			"void GfxSystem_SetColorWriteEnabled(GfxSystem* system, bool colorWriteEnabled)",
			"void GfxSystem_SetCullingEnabled(GfxSystem* system, bool cullingEnabled)",
			"void GfxSystem_SetDepth(GfxSystem* system, r32 depth)",
			"void GfxSystem_SetDepthTestEnabled(GfxSystem* system, bool depthTestEnabled)",
			"void GfxSystem_SetDepthWriteEnabled(GfxSystem* system, bool depthWriteEnabled)",
			"void GfxSystem_SetProjectionMat(GfxSystem* system, mat4 matrix)",
			"void GfxSystem_SetSourceRec(GfxSystem* system, rec rectangle)",
			"void GfxSystem_SetSourceRecRaw(GfxSystem* system, v4r rectangle)",
			"void GfxSystem_SetTintColor(GfxSystem* system, Color32 color)",
			"void GfxSystem_SetTintColorRaw(GfxSystem* system, v4r colorVec)",
			"void GfxSystem_SetViewMat(GfxSystem* system, mat4 matrix)",
			"void GfxSystem_SetWorldMat(GfxSystem* system, mat4 matrix)",
			"void InitBtnState(BtnState* state, bool startedDown)",
			"void InitFont(Font* font, Arena* arena)",
			"void InitGfxSystem(Arena* arena, GfxSystem* systemOut)",
			"void InitKeyboardState(KeyboardState* keyboard)",
			"void InitMouseState(MouseState* mouse)",
			"void InitSokolGraphics(sg_desc sokolGraphicsDesc)",
			"void Plat_SetMouseLocked(bool isMouseLocked)",
			"void RefreshBtnState(BtnState* state)",
			"void RefreshKeyboardState(KeyboardState* keyboard)",
			"void RefreshMouseState(MouseState* mouse, bool isMouseLocked, v2 lockedMouseAbsolutePosition)",
			"void RemoveAttachedTtfFile(Font* font)",
			"void SET_MOUSE_LOCKED_DEF(bool isMouseLocked)",
			"void ShutdownSokolGraphics()",
			"void SokolLogCallback(const char* tag, u32 logLevel, u32 logId, const char* message, u32 lineNum, const char* filePath, void* userData)",
			"void UpdateKeyboardKey(KeyboardState* keyboard, u64 currentTime, Key key, bool pressed)",
			"void UpdateMouseBtn(MouseState* mouse, u64 currentTime, MouseBtn btn, bool pressed)",
			"void UpdateMouseLockedDelta(MouseState* mouse, u64 currentTime, v2 lockedPosDelta)",
			"void UpdateMouseOverWindow(MouseState* mouse, u64 currentTime, bool isMouseOverWindow)",
			"void UpdateMousePosition(MouseState* mouse, u64 currentTime, v2 newPosition)",
			"void UpdateMouseScroll(MouseState* mouse, u64 currentTime, v2 scrollDelta)",
			"void* APP_INIT_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AppGetApi_f",
			"AppInit_f",
			"AppInput",
			"Circle",
			"ContBtn",
			"Font",
			"FontAtlas",
			"FontCharRange",
			"FontFlow",
			"FontFlowAfterChar_f",
			"FontFlowBeforeChar_f",
			"FontFlowCallbacks",
			"FontFlowDrawChar_f",
			"FontFlowGlyph",
			"FontFlowState",
			"FontGlyph",
			"FontStyleFlag",
			"GeneratedMesh",
			"GfxPipelineBlendMode",
			"Key",
			"ModifierKey",
			"MouseBtn",
			"PlatformApi",
			"SetMouseLocked_f",
			"TextLayout",
			"TextMeasure",
		],
	},
}
