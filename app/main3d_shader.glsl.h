#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --format=sokol_impl --errfmt=msvc --slang=hlsl5:glsl430:metal_macos --input=C:\\gamedev\\projects\\SokolPbrRenderer\\app\\main3d_shader.glsl --output=C:\\gamedev\\projects\\SokolPbrRenderer\\app\\main3d_shader.glsl.h

    Overview:
    =========
    Shader program: 'main3d':
        Get shader desc: main3d_shader_desc(sg_query_backend());
        Vertex Shader: vertex_shader
        Fragment Shader: fragment_shader
        Attributes:
            ATTR_main3d_position => 0
            ATTR_main3d_texCoord0 => 1
            ATTR_main3d_color0 => 2
    Bindings:
        Uniform block 'main3d_VertParams':
            C struct: main3d_VertParams_t
            Bind slot: UB_main3d_VertParams => 0
        Uniform block 'main3d_FragParams':
            C struct: main3d_FragParams_t
            Bind slot: UB_main3d_FragParams => 1
        Image 'main3d_texture0':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_main3d_texture0 => 0
        Sampler 'main3d_sampler0':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_main3d_sampler0 => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before main3d_shader.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
const sg_shader_desc* main3d_shader_desc(sg_backend backend);
#define ATTR_main3d_position (0)
#define ATTR_main3d_texCoord0 (1)
#define ATTR_main3d_color0 (2)
#define UB_main3d_VertParams (0)
#define UB_main3d_FragParams (1)
#define IMG_main3d_texture0 (0)
#define SMP_main3d_sampler0 (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct main3d_VertParams_t {
    mat4 world;
    mat4 view;
    mat4 projection;
    v2 main3d_texture0_size;
    uint8_t _pad_200[8];
    v4r sourceRec0;
} main3d_VertParams_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct main3d_FragParams_t {
    v4r tint;
} main3d_FragParams_t;
#pragma pack(pop)
#if defined(SOKOL_SHDC_IMPL)
/*
    #version 430

    uniform vec4 main3d_VertParams[14];
    layout(location = 0) in vec3 position;
    layout(location = 0) out vec4 fragColor;
    layout(location = 2) in vec4 color0;
    layout(location = 1) out vec2 fragSampleCoord;
    layout(location = 1) in vec2 texCoord0;

    void main()
    {
        gl_Position = mat4(main3d_VertParams[8], main3d_VertParams[9], main3d_VertParams[10], main3d_VertParams[11]) * (mat4(main3d_VertParams[4], main3d_VertParams[5], main3d_VertParams[6], main3d_VertParams[7]) * (mat4(main3d_VertParams[0], main3d_VertParams[1], main3d_VertParams[2], main3d_VertParams[3]) * vec4(position, 1.0)));
        fragColor = color0;
        fragSampleCoord = vec2(fma(texCoord0.x, main3d_VertParams[13].z, main3d_VertParams[13].x) / main3d_VertParams[12].x, fma(texCoord0.y, main3d_VertParams[13].w, main3d_VertParams[13].y) / main3d_VertParams[12].y);
    }

*/
static const uint8_t vertex_shader_source_glsl430[843] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x61,0x69,0x6e,0x33,
    0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x34,0x5d,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,
    0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,
    0x61,0x74,0x34,0x28,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,
    0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,
    0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,
    0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,
    0x28,0x6d,0x61,0x74,0x34,0x28,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,
    0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x6d,0x61,0x69,0x6e,
    0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,
    0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,
    0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,
    0x28,0x6d,0x61,0x74,0x34,0x28,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,
    0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x6d,0x61,0x69,0x6e,
    0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,
    0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,
    0x72,0x64,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x66,0x6d,0x61,0x28,0x74,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x2e,0x78,0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,
    0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x5d,
    0x2e,0x7a,0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x5d,0x2e,0x78,0x29,0x20,0x2f,0x20,0x6d,
    0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x31,0x32,0x5d,0x2e,0x78,0x2c,0x20,0x66,0x6d,0x61,0x28,0x74,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x30,0x2e,0x79,0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,
    0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x5d,0x2e,0x77,
    0x2c,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x33,0x5d,0x2e,0x79,0x29,0x20,0x2f,0x20,0x6d,0x61,0x69,
    0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,
    0x32,0x5d,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    uniform vec4 main3d_FragParams[1];
    layout(binding = 16) uniform sampler2D main3d_texture0_main3d_sampler0;

    layout(location = 1) in vec2 fragSampleCoord;
    layout(location = 0) out vec4 frag_color;
    layout(location = 0) in vec4 fragColor;

    void main()
    {
        frag_color = (fragColor * texture(main3d_texture0_main3d_sampler0, fragSampleCoord)) * main3d_FragParams[0];
    }

*/
static const uint8_t fragment_shader_source_glsl430[382] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x61,0x69,0x6e,0x33,
    0x64,0x5f,0x46,0x72,0x61,0x67,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,
    0x3d,0x20,0x31,0x36,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6d,
    0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x6d,
    0x61,0x69,0x6e,0x33,0x64,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,
    0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x29,
    0x29,0x20,0x2a,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x46,0x72,0x61,0x67,0x50,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    cbuffer main3d_VertParams : register(b0)
    {
        row_major float4x4 _20_world : packoffset(c0);
        row_major float4x4 _20_view : packoffset(c4);
        row_major float4x4 _20_projection : packoffset(c8);
        float2 _20_main3d_texture0_size : packoffset(c12);
        float4 _20_sourceRec0 : packoffset(c13);
    };


    static float4 gl_Position;
    static float3 position;
    static float4 fragColor;
    static float4 color0;
    static float2 fragSampleCoord;
    static float2 texCoord0;

    struct SPIRV_Cross_Input
    {
        float3 position : TEXCOORD0;
        float2 texCoord0 : TEXCOORD1;
        float4 color0 : TEXCOORD2;
    };

    struct SPIRV_Cross_Output
    {
        float4 fragColor : TEXCOORD0;
        float2 fragSampleCoord : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = mul(mul(mul(float4(position, 1.0f), _20_world), _20_view), _20_projection);
        fragColor = color0;
        fragSampleCoord = float2(mad(texCoord0.x, _20_sourceRec0.z, _20_sourceRec0.x) / _20_main3d_texture0_size.x, mad(texCoord0.y, _20_sourceRec0.w, _20_sourceRec0.y) / _20_main3d_texture0_size.y);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        position = stage_input.position;
        color0 = stage_input.color0;
        texCoord0 = stage_input.texCoord0;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.fragColor = fragColor;
        stage_output.fragSampleCoord = fragSampleCoord;
        return stage_output;
    }
*/
static const uint8_t vertex_shader_source_hlsl5[1453] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,
    0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,
    0x34,0x20,0x5f,0x32,0x30,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x20,0x3a,0x20,0x70,0x61,
    0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x78,0x34,0x20,0x5f,0x32,0x30,0x5f,0x76,0x69,0x65,0x77,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x32,0x30,0x5f,0x70,0x72,0x6f,0x6a,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x63,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x32,0x30,0x5f,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,0x61,
    0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x32,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x30,0x5f,0x73,0x6f,
    0x75,0x72,0x63,0x65,0x52,0x65,0x63,0x30,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x33,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x30,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,
    0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x6d,0x75,0x6c,0x28,0x6d,0x75,0x6c,0x28,0x6d,0x75,0x6c,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x29,
    0x2c,0x20,0x5f,0x32,0x30,0x5f,0x76,0x69,0x65,0x77,0x29,0x2c,0x20,0x5f,0x32,0x30,
    0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x6d,0x61,0x64,0x28,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,
    0x2e,0x78,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x73,0x6f,0x75,0x72,0x63,0x65,0x52,0x65,
    0x63,0x30,0x2e,0x7a,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x73,0x6f,0x75,0x72,0x63,0x65,
    0x52,0x65,0x63,0x30,0x2e,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x30,0x5f,0x6d,0x61,
    0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x73,0x69,
    0x7a,0x65,0x2e,0x78,0x2c,0x20,0x6d,0x61,0x64,0x28,0x74,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x30,0x2e,0x79,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x73,0x6f,0x75,0x72,0x63,
    0x65,0x52,0x65,0x63,0x30,0x2e,0x77,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x73,0x6f,0x75,
    0x72,0x63,0x65,0x52,0x65,0x63,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x30,
    0x5f,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x30,
    0x5f,0x73,0x69,0x7a,0x65,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,
    0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer main3d_FragParams : register(b0)
    {
        float4 _34_tint : packoffset(c0);
    };

    Texture2D<float4> main3d_texture0 : register(t0);
    SamplerState main3d_sampler0 : register(s0);

    static float2 fragSampleCoord;
    static float4 frag_color;
    static float4 fragColor;

    struct SPIRV_Cross_Input
    {
        float4 fragColor : TEXCOORD0;
        float2 fragSampleCoord : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    void frag_main()
    {
        frag_color = (fragColor * main3d_texture0.Sample(main3d_sampler0, fragSampleCoord)) * _34_tint;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        fragSampleCoord = stage_input.fragSampleCoord;
        fragColor = stage_input.fragColor;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const uint8_t fragment_shader_source_hlsl5[830] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x46,
    0x72,0x61,0x67,0x50,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x34,0x5f,0x74,0x69,0x6e,0x74,0x20,0x3a,
    0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,
    0x61,0x74,0x65,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,
    0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,
    0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x2a,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x6d,0x61,0x69,
    0x6e,0x33,0x64,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x72,
    0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x29,0x29,0x20,
    0x2a,0x20,0x5f,0x33,0x34,0x5f,0x74,0x69,0x6e,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct main3d_VertParams
    {
        float4x4 world;
        float4x4 view;
        float4x4 projection;
        float2 main3d_texture0_size;
        float4 sourceRec0;
    };

    struct main0_out
    {
        float4 fragColor [[user(locn0)]];
        float2 fragSampleCoord [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 position [[attribute(0)]];
        float2 texCoord0 [[attribute(1)]];
        float4 color0 [[attribute(2)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant main3d_VertParams& _20 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = _20.projection * (_20.view * (_20.world * float4(in.position, 1.0)));
        out.fragColor = in.color0;
        out.fragSampleCoord = float2(fma(in.texCoord0.x, _20.sourceRec0.z, _20.sourceRec0.x) / _20.main3d_texture0_size.x, fma(in.texCoord0.y, _20.sourceRec0.w, _20.sourceRec0.y) / _20.main3d_texture0_size.y);
        return out;
    }

*/
static const uint8_t vertex_shader_source_metal_macos[971] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x77,0x6f,0x72,0x6c,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x78,0x34,0x20,0x76,0x69,0x65,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x6d,0x61,
    0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x73,0x69,
    0x7a,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x73,
    0x6f,0x75,0x72,0x63,0x65,0x52,0x65,0x63,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,
    0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,
    0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,
    0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x33,0x64,0x5f,0x56,0x65,0x72,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x26,
    0x20,0x5f,0x32,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,
    0x6f,0x6e,0x20,0x2a,0x20,0x28,0x5f,0x32,0x30,0x2e,0x76,0x69,0x65,0x77,0x20,0x2a,
    0x20,0x28,0x5f,0x32,0x30,0x2e,0x77,0x6f,0x72,0x6c,0x64,0x20,0x2a,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x69,0x6e,
    0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x66,0x6d,0x61,0x28,0x69,0x6e,
    0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x2e,0x78,0x2c,0x20,0x5f,0x32,
    0x30,0x2e,0x73,0x6f,0x75,0x72,0x63,0x65,0x52,0x65,0x63,0x30,0x2e,0x7a,0x2c,0x20,
    0x5f,0x32,0x30,0x2e,0x73,0x6f,0x75,0x72,0x63,0x65,0x52,0x65,0x63,0x30,0x2e,0x78,
    0x29,0x20,0x2f,0x20,0x5f,0x32,0x30,0x2e,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x73,0x69,0x7a,0x65,0x2e,0x78,0x2c,0x20,
    0x66,0x6d,0x61,0x28,0x69,0x6e,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,
    0x2e,0x79,0x2c,0x20,0x5f,0x32,0x30,0x2e,0x73,0x6f,0x75,0x72,0x63,0x65,0x52,0x65,
    0x63,0x30,0x2e,0x77,0x2c,0x20,0x5f,0x32,0x30,0x2e,0x73,0x6f,0x75,0x72,0x63,0x65,
    0x52,0x65,0x63,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x30,0x2e,0x6d,0x61,
    0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x73,0x69,
    0x7a,0x65,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct main3d_FragParams
    {
        float4 tint;
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float4 fragColor [[user(locn0)]];
        float2 fragSampleCoord [[user(locn1)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant main3d_FragParams& _34 [[buffer(0)]], texture2d<float> main3d_texture0 [[texture(0)]], sampler main3d_sampler0 [[sampler(0)]])
    {
        main0_out out = {};
        out.frag_color = (in.fragColor * main3d_texture0.sample(main3d_sampler0, in.fragSampleCoord)) * _34.tint;
        return out;
    }

*/
static const uint8_t fragment_shader_source_metal_macos[626] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x33,0x64,0x5f,0x46,0x72,0x61,0x67,0x50,0x61,0x72,0x61,0x6d,0x73,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x74,0x69,
    0x6e,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,
    0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,
    0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,
    0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,
    0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x46,0x72,
    0x61,0x67,0x50,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x33,0x34,0x20,0x5b,0x5b,
    0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x6d,0x61,
    0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x20,0x5b,0x5b,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,
    0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x28,0x69,0x6e,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,
    0x6f,0x72,0x20,0x2a,0x20,0x6d,0x61,0x69,0x6e,0x33,0x64,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x6d,0x61,0x69,0x6e,
    0x33,0x64,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,
    0x66,0x72,0x61,0x67,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6f,0x6f,0x72,0x64,0x29,
    0x29,0x20,0x2a,0x20,0x5f,0x33,0x34,0x2e,0x74,0x69,0x6e,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
const sg_shader_desc* main3d_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vertex_shader_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fragment_shader_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "position";
            desc.attrs[1].glsl_name = "texCoord0";
            desc.attrs[2].glsl_name = "color0";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 224;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 14;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "main3d_VertParams";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "main3d_FragParams";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "main3d_texture0_main3d_sampler0";
            desc.label = "main3d_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vertex_shader_source_hlsl5;
            desc.vertex_func.d3d11_target = "vs_5_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fragment_shader_source_hlsl5;
            desc.fragment_func.d3d11_target = "ps_5_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.attrs[2].hlsl_sem_name = "TEXCOORD";
            desc.attrs[2].hlsl_sem_index = 2;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 224;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].hlsl_register_b_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].hlsl_register_t_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "main3d_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vertex_shader_source_metal_macos;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)fragment_shader_source_metal_macos;
            desc.fragment_func.entry = "main0";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 224;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].msl_buffer_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].msl_texture_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[0].msl_sampler_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "main3d_shader";
        }
        return &desc;
    }
    return 0;
}
#endif // SOKOL_SHDC_IMPL

//NOTE: These lines were added by find_and_compile_shaders.py
//NOTE: Because an empty array is invalid in C, we always add at least one dummy entry to these definition #defines while the corresponding COUNT #define will remain 0
#ifndef NO_ENTRIES_STR
#define NO_ENTRIES_STR "no_entries"
#endif
#define main3d_SHADER_FILE_PATH "C:\\gamedev\\projects\\SokolPbrRenderer\\app\\main3d_shader.glsl"
#define main3d_SHADER_IMAGE_COUNT 1
#define main3d_SHADER_IMAGE_DEFS { \
	{ .name="main3d_texture0", .index=IMG_main3d_texture0 }, \
} // These should match ShaderImageDef struct found in gfx_shader.h
#define main3d_SHADER_SAMPLER_COUNT 1
#define main3d_SHADER_SAMPLER_DEFS { \
	{ .name="main3d_sampler0", .index=SMP_main3d_sampler0 }, \
} // These should match ShaderSamplerDef struct found in gfx_shader.h
#define main3d_SHADER_UNIFORM_COUNT 6
#define main3d_SHADER_UNIFORM_DEFS { \
	{ .name="world", .blockIndex=UB_main3d_VertParams, .offset=STRUCT_VAR_OFFSET(main3d_VertParams_t, world), .size=STRUCT_VAR_SIZE(main3d_VertParams_t, world) }, \
	{ .name="view", .blockIndex=UB_main3d_VertParams, .offset=STRUCT_VAR_OFFSET(main3d_VertParams_t, view), .size=STRUCT_VAR_SIZE(main3d_VertParams_t, view) }, \
	{ .name="projection", .blockIndex=UB_main3d_VertParams, .offset=STRUCT_VAR_OFFSET(main3d_VertParams_t, projection), .size=STRUCT_VAR_SIZE(main3d_VertParams_t, projection) }, \
	{ .name="main3d_texture0_size", .blockIndex=UB_main3d_VertParams, .offset=STRUCT_VAR_OFFSET(main3d_VertParams_t, main3d_texture0_size), .size=STRUCT_VAR_SIZE(main3d_VertParams_t, main3d_texture0_size) }, \
	{ .name="sourceRec0", .blockIndex=UB_main3d_VertParams, .offset=STRUCT_VAR_OFFSET(main3d_VertParams_t, sourceRec0), .size=STRUCT_VAR_SIZE(main3d_VertParams_t, sourceRec0) }, \
	{ .name="tint", .blockIndex=UB_main3d_FragParams, .offset=STRUCT_VAR_OFFSET(main3d_FragParams_t, tint), .size=STRUCT_VAR_SIZE(main3d_FragParams_t, tint) }, \
} // These should match ShaderUniformDef struct found in gfx_shader.h
#define main3d_SHADER_ATTR_COUNT 3
#define main3d_SHADER_ATTR_DEFS { \
	{ .name="position", .index=ATTR_main3d_position }, \
	{ .name="texCoord0", .index=ATTR_main3d_texCoord0 }, \
	{ .name="color0", .index=ATTR_main3d_color0 }, \
} // These should match ShaderAttributeDef struct found in gfx_shader.h
